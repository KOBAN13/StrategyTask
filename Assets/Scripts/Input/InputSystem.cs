//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""MainInput"",
            ""id"": ""65a4a8a4-03e4-4b5a-be7a-97c1f70c7e49"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""157546c0-0faa-4de3-b74d-5a7ae9d5a53f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Follow"",
                    ""type"": ""Button"",
                    ""id"": ""67b2bbba-4287-4f45-b6b5-1da45c8becd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ae3a3c22-868e-4642-8c8a-dd74d194a42c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccefb404-c933-4f7c-a0eb-a7cc67711617"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66121227-d048-425e-9436-1bebf2d6aa31"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Follow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4afa56be-5c29-447b-a5eb-5c7ccad7609e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainInput
        m_MainInput = asset.FindActionMap("MainInput", throwIfNotFound: true);
        m_MainInput_Rotate = m_MainInput.FindAction("Rotate", throwIfNotFound: true);
        m_MainInput_Follow = m_MainInput.FindAction("Follow", throwIfNotFound: true);
        m_MainInput_Jump = m_MainInput.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainInput
    private readonly InputActionMap m_MainInput;
    private IMainInputActions m_MainInputActionsCallbackInterface;
    private readonly InputAction m_MainInput_Rotate;
    private readonly InputAction m_MainInput_Follow;
    private readonly InputAction m_MainInput_Jump;
    public struct MainInputActions
    {
        private @InputSystem m_Wrapper;
        public MainInputActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_MainInput_Rotate;
        public InputAction @Follow => m_Wrapper.m_MainInput_Follow;
        public InputAction @Jump => m_Wrapper.m_MainInput_Jump;
        public InputActionMap Get() { return m_Wrapper.m_MainInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainInputActions set) { return set.Get(); }
        public void SetCallbacks(IMainInputActions instance)
        {
            if (m_Wrapper.m_MainInputActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_MainInputActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_MainInputActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_MainInputActionsCallbackInterface.OnRotate;
                @Follow.started -= m_Wrapper.m_MainInputActionsCallbackInterface.OnFollow;
                @Follow.performed -= m_Wrapper.m_MainInputActionsCallbackInterface.OnFollow;
                @Follow.canceled -= m_Wrapper.m_MainInputActionsCallbackInterface.OnFollow;
                @Jump.started -= m_Wrapper.m_MainInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainInputActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MainInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Follow.started += instance.OnFollow;
                @Follow.performed += instance.OnFollow;
                @Follow.canceled += instance.OnFollow;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MainInputActions @MainInput => new MainInputActions(this);
    public interface IMainInputActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnFollow(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
